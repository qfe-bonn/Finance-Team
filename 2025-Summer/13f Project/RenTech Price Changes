import pandas as pd
import yfinance as yf
from datetime import timedelta
import re
import time
import os

# Output dir
output_dir = '/Users/albertredmann/Library/CloudStorage/OneDrive-Pers√∂nlich/Desktop/QFE/Projects/13f/Data'  # Modify to repeat yourself
os.makedirs(output_dir, exist_ok=True)

# Read holdings CSV to know relevant tickers
df = pd.read_csv('/Users/albertredmann/VS Code/Git/Finance Projects/13f/Tests/RenTech_top50_values.csv', index_col=0, parse_dates=True)
df = df.drop(columns=['QUARTER'], errors='ignore')
df = df.loc[:, [col for col in df.columns if re.fullmatch(r'[A-Z]{1,5}', col)]]

dates = df.index
tickers = df.columns.tolist()

print(f'yfinance version:'+yf.__version__)

# Download price data and calculate price changes
print("Downloading and computing price changes...")
batch_size = 10 # Make sure to have the latest yfinance version installed as older versions produced too many request errors for me. Script prints your installed version
results = []

for i in range(0, len(tickers), batch_size):
    batch = tickers[i:i+batch_size]
    print(f"Fetching batch {i//batch_size + 1}: {batch}")
    try:
        data = yf.download(
            tickers=batch,
            start=(dates.min() - timedelta(days=2)).strftime('%Y-%m-%d'),
            end=(dates.max() + timedelta(days=2)).strftime('%Y-%m-%d'),
            group_by='ticker',
            auto_adjust=False,
            progress=False,
            threads=True
        )

        for ticker in batch:
            try:
                df_ticker = data[ticker].dropna()
                df_ticker.index = pd.to_datetime(df_ticker.index)

                for date in dates:
                    day_before = df_ticker[df_ticker.index < date]
                    day_after = df_ticker[df_ticker.index > date]
                    if day_before.empty or day_after.empty:
                        continue

                    prev_day = day_before.iloc[-1] # Specify Date range from one day before filing date to one day after, can be modified
                    next_day = day_after.iloc[0]

                    pct_change = (next_day['Close'] - prev_day['Close']) / prev_day['Close'] * 100 # Calculate percentage gain/loss over period detailed before
                    results.append({
                        'Date': date,
                        'Ticker': ticker,
                        'Pct_Change': pct_change
                    })

            except Exception as e:
                print(f"Error processing {ticker}: {e}")

    except Exception as e:
        print(f"Error downloading batch {batch}: {e}")
    time.sleep(2)

# Combine all price changes into one csv and save to output dir
price_changes_df = pd.DataFrame(results)
price_changes_df.to_csv(os.path.join(output_dir, "Rentech_holdings_price_changes.csv"), index=False)
print(f"Saved price_changes.csv to {output_dir}")
